diff --git a/cgyro/src/cgyro_globals.F90 b/cgyro/src/cgyro_globals.F90
index accba339..46faf075 100644
--- a/cgyro/src/cgyro_globals.F90
+++ b/cgyro/src/cgyro_globals.F90
@@ -3,21 +3,27 @@
 !
 ! PURPOSE:
 !  CGYRO global variables.  The idea is to have a primary, large
 !  module containing all essential CGYRO arrays and scalars.
 !-----------------------------------------------------------------
 
 module cgyro_globals
 
   use, intrinsic :: iso_c_binding
 #ifdef _OPENACC
+
+#ifdef HIPGPU
+  use hipfort_hipfft
+#else
   use cuFFT
+#endif
+
 #endif
   use, intrinsic :: iso_fortran_env
   
   ! Data output precision setting
   integer, parameter :: BYTE=4 ! Change to 8 for double precision
   
   !---------------------------------------------------------------
   ! Input parameters:
   !
   integer :: n_energy
@@ -379,30 +385,39 @@ module cgyro_globals
   real, dimension(:,:,:,:), allocatable :: cflux_loc
   real, dimension(:,:,:,:), allocatable :: cflux
   complex, dimension(:,:,:,:,:), allocatable :: gflux_loc
   complex, dimension(:,:,:,:,:), allocatable :: gflux
   real, dimension(:,:), allocatable :: cflux_tave, gflux_tave
   real :: tave_min, tave_max
   integer :: tave_step
   integer :: nflux
   !
   ! Nonlinear plans
+#ifndef _OPENACC
+  ! CPU-FFTW plans
   type(C_PTR) :: plan_r2c
   type(C_PTR) :: plan_c2r
   !
+#else
   ! GPU-FFTW plans
-#ifdef _OPENACC
+
+#ifdef HIPGPU
+  type(C_PTR) :: hip_plan_r2c_many
+  type(C_PTR) :: hip_plan_c2r_many
+#else
   integer(c_int) :: cu_plan_r2c_many
   integer(c_int) :: cu_plan_c2r_many
-  complex, dimension(:,:,:),allocatable :: fxmany,fymany,gxmany,gymany
-  real, dimension(:,:,:), allocatable :: uxmany,uymany
-  real, dimension(:,:,:), allocatable :: vxmany,vymany,uvmany
+#endif
+
+  complex, dimension(:,:,:),allocatable, target :: fxmany,fymany,gxmany,gymany
+  real, dimension(:,:,:), allocatable, target :: uxmany,uymany
+  real, dimension(:,:,:), allocatable, target :: vxmany,vymany,uvmany
 #endif
   ! 
   ! 2D FFT dimensions 
   integer :: nx,ny
   integer :: nx0,ny0
   !
   ! 2D FFT work arrays
 #ifndef _OPENACC
   real, dimension(:,:,:), allocatable :: uxmany
   real, dimension(:,:,:), allocatable :: uymany
diff --git a/cgyro/src/cgyro_init_manager.F90 b/cgyro/src/cgyro_init_manager.F90
index 6d187c9d..589d2cd0 100644
--- a/cgyro/src/cgyro_init_manager.F90
+++ b/cgyro/src/cgyro_init_manager.F90
@@ -12,25 +12,33 @@
 !-----------------------------------------------------------------
 
 subroutine cgyro_init_manager
 
   use mpi
   use timer_lib
   use cgyro_globals
   use half_hermite
 
   use cgyro_io
+
 #ifdef _OPENACC
+
+#ifdef HIPGPU
+  use hipfort_hipfft, only : hipfftPlanMany, &
+       HIPFFT_C2R,HIPFFT_Z2D,HIPFFT_R2C,HIPFFT_D2Z
+#else
   use cufft, only : cufftPlanMany, &
        CUFFT_C2R,CUFFT_Z2D,CUFFT_R2C,CUFFT_D2Z
 #endif
 
+#endif !_OPENACC
+
   implicit none
 
 #ifndef _OPENACC
   include 'fftw3.f03'
 #endif
 
 #ifdef _OPENACC
   integer :: howmany,istatus
   integer, parameter :: irank = 2
   integer, dimension(irank) :: ndim,inembed,onembed
@@ -393,46 +398,79 @@ subroutine cgyro_init_manager
 
   ndim(1) = nx
   ndim(2) = ny
   idist = size(fxmany,1)*size(fxmany,2)
   odist = size(uxmany,1)*size(uxmany,2)
   istride = 1
   ostride = 1
   inembed = size(fxmany,1)
   onembed = size(uxmany,1)
 
+#ifdef HIPGPU
+  hip_plan_c2r_many = c_null_ptr
+  istatus = hipfftPlanMany(&
+       hip_plan_c2r_many, &
+       irank, &
+       ndim, &
+       inembed, &
+       istride, &
+       idist, &
+       onembed, &
+       ostride, &
+       odist, &
+       merge(HIPFFT_C2R,HIPFFT_Z2D,kind(uxmany) == singlePrecision), &
+       nsplit)
+#else
   istatus = cufftPlanMany(&
        cu_plan_c2r_many, &
        irank, &
        ndim, &
        inembed, &
        istride, &
        idist, &
        onembed, &
        ostride, &
        odist, &
        merge(CUFFT_C2R,CUFFT_Z2D,kind(uxmany) == singlePrecision), &
        nsplit)
+#endif
 
   idist = size(uxmany,1)*size(uxmany,2)
   odist = size(fxmany,1)*size(fxmany,2)
   inembed = size(uxmany,1)
   onembed = size(fxmany,1) 
   istride = 1
   ostride = 1
+#ifdef HIPGPU
+  hip_plan_r2c_many = c_null_ptr
+  istatus = hipfftPlanMany(&
+       hip_plan_r2c_many, &
+       irank, &
+       ndim, &
+       inembed, &
+       istride, &
+       idist, &
+       onembed, &
+       ostride, &
+       odist, &
+       merge(HIPFFT_R2C,HIPFFT_D2Z,kind(uxmany) == singlePrecision), &
+       nsplit)
+#else
   istatus = cufftPlanMany(&
        cu_plan_r2c_many, &
        irank, &
        ndim, &
        inembed, &
        istride, &
        idist, &
        onembed, &
        ostride, &
        odist, &
        merge(CUFFT_R2C,CUFFT_D2Z,kind(uxmany) == singlePrecision), &
        nsplit)
 #endif
 
+#endif ! _OPENACC
+
   call timer_lib_out('nl_init')
 
 end subroutine cgyro_init_manager
diff --git a/cgyro/src/cgyro_nl_fftw.gpu.f90 b/cgyro/src/cgyro_nl_fftw.gpu.F90
similarity index 86%
rename from cgyro/src/cgyro_nl_fftw.gpu.f90
rename to cgyro/src/cgyro_nl_fftw.gpu.F90
index 6bbaca4b..87776de0 100644
--- a/cgyro/src/cgyro_nl_fftw.gpu.f90
+++ b/cgyro/src/cgyro_nl_fftw.gpu.F90
@@ -1,12 +1,12 @@
 !-----------------------------------------------------------------
-! cgyro_nl_fftw.gpu.f90 [GPU (acc-cuFFT) version]
+! cgyro_nl_fftw.gpu.f90 [GPU (acc-cuFFT/hipFFT) version]
 !
 ! PURPOSE:
 !  Evaluate nonlinear bracket with dealiased FFT.  It is natural 
 !  to use the FFTW complex-to-real (c2r) transform to move to real 
 !  space, compute the convolution (uv), and transform back to the 
 !  spectral form using a real-to-complex transform (r2c).
 !  
 ! NOTE: Need to be careful with (p=-nr/2,n=0) component.
 !-----------------------------------------------------------------
 
@@ -40,21 +40,25 @@ subroutine cgyro_nl_fftw_mul(sz,uvm,uxm,vym,uym,vxm,inv_nxny)
 
 !$acc parallel loop independent present(uvm,uxm,vym,uym,vxm) private(i)
   do i=1,sz
     uvm(i) = (uxm(i)*vym(i)-uym(i)*vxm(i))*inv_nxny
   enddo
 
 end subroutine
 
 subroutine cgyro_nl_fftw(ij)
 
+#ifdef HIPGPU
+  use hipfort_hipfft
+#else
   use cufft
+#endif
   use timer_lib
   use parallel_lib
   use cgyro_nl_comm
   use cgyro_globals
 
   implicit none
   !-----------------------------------
   integer, intent(in) :: ij
   !-----------------------------------
   integer :: j,p,iexch
@@ -110,31 +114,48 @@ subroutine cgyro_nl_fftw(ij)
        enddo
      enddo
   enddo
 
   ! make sure g_req progresses
   call parallel_slib_test(g_req)
 
      ! --------------------------------------
      ! perform many Fourier Transforms at once
      ! --------------------------------------
-!$acc wait
+
 !$acc  host_data &
-!$acc& use_device(fxmany,fymany) &
-!$acc& use_device(uxmany,uymany)
+!$acc& use_device(fymany) &
+!$acc& use_device(uymany)
+#ifdef HIPGPU
+  rc = hipfftExecZ2D(hip_plan_c2r_many,c_loc(fymany),c_loc(uymany))
+#else
+  rc = cufftExecZ2D(cu_plan_c2r_many,fymany,uymany)
+#endif
+
+!$acc end host_data
 
-  rc = cufftExecZ2D(cu_plan_c2r_many,fxmany,uxmany)
   ! make sure g_req progresses
   call parallel_slib_test(g_req)
-  rc = cufftExecZ2D(cu_plan_c2r_many,fymany,uymany)
 
 !$acc wait
+  ! fxmany is complete now
+
+!$acc  host_data &
+!$acc& use_device(fxmany) &
+!$acc& use_device(uxmany)
+
+#ifdef HIPGPU
+  rc = hipfftExecZ2D(hip_plan_c2r_many,c_loc(fxmany),c_loc(uxmany))
+#else
+  rc = cufftExecZ2D(cu_plan_c2r_many,fxmany,uxmany)
+#endif
+
 !$acc end host_data
   call timer_lib_out('nl')
 
   ! time to wait for the g_nl to become avaialble
   call timer_lib_in('nl_comm')
   call parallel_slib_f_fd_wait(n_field,n_radial,n_jtheta,gpack,g_nl,g_req)
   call timer_lib_out('nl_comm')
 
   call timer_lib_in('nl')
 
@@ -167,44 +188,66 @@ subroutine cgyro_nl_fftw(ij)
               g0 = i_c*sum( jvec_c_nl(1:n_field,ir,it_loc,iv_loc,itor)*g_nl(1:n_field,ir,it_loc,itor))
            endif
            gxmany(iy,ix,j) = p*g0
            gymany(iy,ix,j) = iy*g0
          enddo
        enddo
      enddo
   enddo
 
 !$acc  host_data &
-!$acc& use_device(gxmany,gymany) &
-!$acc& use_device(vxmany,vymany)
+!$acc& use_device(gymany) &
+!$acc& use_device(vymany)
 
-  rc = cufftExecZ2D(cu_plan_c2r_many,gxmany,vxmany)
+#ifdef HIPGPU
+  rc = hipfftExecZ2D(hip_plan_c2r_many,c_loc(gymany),c_loc(vymany))
+#else
   rc = cufftExecZ2D(cu_plan_c2r_many,gymany,vymany)
+#endif
+
+!$acc end host_data
+
+!$acc wait
+  ! gxmany is complete now
+
+!$acc  host_data &
+!$acc& use_device(gxmany) &
+!$acc& use_device(vxmany)
+
+#ifdef HIPGPU
+  rc = hipfftExecZ2D(hip_plan_c2r_many,c_loc(gxmany),c_loc(vxmany))
+#else
+  rc = cufftExecZ2D(cu_plan_c2r_many,gxmany,vxmany)
+#endif
 
 !$acc wait
 !$acc end host_data
 
   ! Poisson bracket in real space
   ! uv = (ux*vy-uy*vx)/(nx*ny)
 
   inv_nxny = 1.0/(nx*ny)
 
   call cgyro_nl_fftw_mul(size(uvmany,1)*size(uvmany,2)*size(uvmany,3), &
                          uvmany,uxmany,vymany,uymany,vxmany,inv_nxny)
 
   ! ------------------
   ! Transform uv to fx
   ! ------------------
 
 !$acc wait
 !$acc host_data use_device(uvmany,fxmany)
+#ifdef HIPGPU
+  rc = hipfftExecD2Z(hip_plan_r2c_many,c_loc(uvmany),c_loc(fxmany))
+#else
   rc = cufftExecD2Z(cu_plan_r2c_many,uvmany,fxmany)
+#endif
 !$acc wait
 !$acc end host_data
 !$acc wait
 
   call timer_lib_out('nl')
   call timer_lib_in('nl_mem')
 
   ! NOTE: The FFT will generate an unwanted n=0,p=-nr/2 component
   ! that will be filtered in the main time-stepping loop
 
